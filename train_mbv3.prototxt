layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "score_map"
  top: "geo_map"
  python_param {
    module: "pylayerUtils"
    layer: "DataLayer"
    param_str: "{\'data_dir\': \'/home1/zjy/datasets/\', \'dataset\': \'invoice\', \'patch_size\': 512, \'batch_size\': 4, \'seed\': 123, \'mean\': (103.939, 116.779, 123.68)}"
  }
}
# layer {
  # name: "data"
  # type: "Input"
  # top: "data"
  # input_param {
    # shape {
      # dim: 1
      # dim: 3
      # dim: 512
      # dim: 512
    # }
  # }
# }
## ========== conv ===========
layer {
  name: "Conv"
  type: "Convolution"
  bottom: "data"
  top: "Conv"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 16
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "Conv_bn"
  type: "BatchNorm"
  bottom: "Conv"
  top: "Conv"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "Conv_scale"
  type: "Scale"
  bottom: "Conv"
  top: "Conv"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "Conv_shift"
  type: "Power"
  bottom: "Conv"
  top: "Conv_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "Conv_shift_relu6"
  type: "ReLU6"
  bottom: "Conv_shift"
  top: "Conv_shift"
}
layer {
  name: "Conv_shift_relu6_div"
  type: "Power"
  bottom: "Conv_shift"
  top: "Conv_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "Conv_hswish"
  type: "Eltwise"
  bottom: "Conv"
  bottom: "Conv_shift_relu6_div"
  top: "Conv_hswish"
  eltwise_param {
    operation: PROD
  }
}
## ========== conv1 ============
layer {
  name: "conv_1_pw"
  type: "Convolution"
  bottom: "Conv_hswish"
  top: "conv_1_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 16
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_1_pw_bn"
  type: "BatchNorm"
  bottom: "conv_1_pw"
  top: "conv_1_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_1_pw_scale"
  type: "Scale"
  bottom: "conv_1_pw"
  top: "conv_1_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_1_pw_relu"
  type: "ReLU"
  bottom: "conv_1_pw"
  top: "conv_1_pw"
}
layer {
  name: "conv_1_dw"
  type: "Convolution"
  bottom: "conv_1_pw"
  top: "conv_1_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 16
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 16
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_1_dw_bn"
  type: "BatchNorm"
  bottom: "conv_1_dw"
  top: "conv_1_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_1_dw_scale"
  type: "Scale"
  bottom: "conv_1_dw"
  top: "conv_1_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_1_dw_relu"
  type: "ReLU"
  bottom: "conv_1_dw"
  top: "conv_1_dw"
}
layer {
  name: "conv_1_linear"
  type: "Convolution"
  bottom: "conv_1_dw"
  top: "conv_1_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 16
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_1_linear_bn"
  type: "BatchNorm"
  bottom: "conv_1_linear"
  top: "conv_1_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_1_linear_scale"
  type: "Scale"
  bottom: "conv_1_linear"
  top: "conv_1_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_1_sum"
  type: "Eltwise"
  bottom: "Conv_hswish"
  bottom: "conv_1_linear"
  top: "conv_1"
} 
## ========== conv2 ============
layer {
  name: "conv_2_pw"
  type: "Convolution"
  bottom: "conv_1"
  top: "conv_2_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 64
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_2_pw_bn"
  type: "BatchNorm"
  bottom: "conv_2_pw"
  top: "conv_2_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_2_pw_scale"
  type: "Scale"
  bottom: "conv_2_pw"
  top: "conv_2_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_2_pw_relu"
  type: "ReLU"
  bottom: "conv_2_pw"
  top: "conv_2_pw"
}
layer {
  name: "conv_2_dw"
  type: "Convolution"
  bottom: "conv_2_pw"
  top: "conv_2_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 1
    kernel_size: 3
    stride: 2  ## s=2
    group: 64
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_2_dw_bn"
  type: "BatchNorm"
  bottom: "conv_2_dw"
  top: "conv_2_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_2_dw_scale"
  type: "Scale"
  bottom: "conv_2_dw"
  top: "conv_2_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_2_dw_relu"
  type: "ReLU"
  bottom: "conv_2_dw"
  top: "conv_2_dw"
}
layer {
  name: "conv_2_linear"
  type: "Convolution"
  bottom: "conv_2_dw"
  top: "conv_2_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 24
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_2_linear_bn"
  type: "BatchNorm"
  bottom: "conv_2_linear"
  top: "conv_2_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_2_linear_scale"
  type: "Scale"
  bottom: "conv_2_linear"
  top: "conv_2_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
 ## ========== conv3 ============  
layer {
  name: "conv_3_pw"
  type: "Convolution"
  bottom: "conv_2_linear"
  top: "conv_3_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 72  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_3_pw_bn"
  type: "BatchNorm"
  bottom: "conv_3_pw"
  top: "conv_3_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_3_pw_scale"
  type: "Scale"
  bottom: "conv_3_pw"
  top: "conv_3_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_3_pw_relu"
  type: "ReLU"
  bottom: "conv_3_pw"
  top: "conv_3_pw"
}
layer {
  name: "conv_3_dw"
  type: "Convolution"
  bottom: "conv_3_pw"
  top: "conv_3_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 72  ## 
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 72  ## 
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_3_dw_bn"
  type: "BatchNorm"
  bottom: "conv_3_dw"
  top: "conv_3_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_3_dw_scale"
  type: "Scale"
  bottom: "conv_3_dw"
  top: "conv_3_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_3_dw_relu"
  type: "ReLU"
  bottom: "conv_3_dw"
  top: "conv_3_dw"
}
layer {
  name: "conv_3_linear"
  type: "Convolution"
  bottom: "conv_3_dw"
  top: "conv_3_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 24
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_3_linear_bn"
  type: "BatchNorm"
  bottom: "conv_3_linear"
  top: "conv_3_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_3_linear_scale"
  type: "Scale"
  bottom: "conv_3_linear"
  top: "conv_3_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_3_sum"
  type: "Eltwise"
  bottom: "conv_2_linear"
  bottom: "conv_3_linear"
  top: "conv_3"
} 
## ========== conv4 s=2模板============
layer {
  name: "conv_4_pw"
  type: "Convolution"
  bottom: "conv_3"
  top: "conv_4_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 72
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_4_pw_bn"
  type: "BatchNorm"
  bottom: "conv_4_pw"
  top: "conv_4_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_4_pw_scale"
  type: "Scale"
  bottom: "conv_4_pw"
  top: "conv_4_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_4_pw_relu"
  type: "ReLU"
  bottom: "conv_4_pw"
  top: "conv_4_pw"
}
layer {
  name: "conv_4_dw"
  type: "Convolution"
  bottom: "conv_4_pw"
  top: "conv_4_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 72
    bias_term: false
    pad: 2
    kernel_size: 5
    stride: 2  ## s=2
    group: 72
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_4_dw_bn"
  type: "BatchNorm"
  bottom: "conv_4_dw"
  top: "conv_4_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_4_dw_scale"
  type: "Scale"
  bottom: "conv_4_dw"
  top: "conv_4_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
## ==== SE-start ====
layer {
  name: "conv_4_dw_pool"
  type: "Pooling"
  bottom: "conv_4_dw"
  top: "conv_4_dw_pool"
  pooling_param {
    pool: AVE
    engine: CAFFE
    global_pooling: true
  }
}
layer {
  name: "conv_4_dw_fc1"
  type: "InnerProduct"
  bottom: "conv_4_dw_pool"
  top: "conv_4_dw_fc1"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 18  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_4_dw_fc1_relu"
  type: "ReLU6"
  bottom: "conv_4_dw_fc1"
  top: "conv_4_dw_fc1"
}
layer {
  name: "conv_4_dw_fc2"
  type: "InnerProduct"
  bottom: "conv_4_dw_fc1"
  top: "conv_4_dw_fc2"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 72  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_4_dw_fc2_sigmoid"
  type: "Sigmoid"  ## 后期换用hard-sigmoid
  bottom: "conv_4_dw_fc2"
  top: "conv_4_dw_fc2"
}
layer {
  name: "conv_4_dw_fc2_scale"
  type: "Scale"
  bottom: "conv_4_dw"
  bottom: "conv_4_dw_fc2"
  top: "conv_4_dw_fc2_scale"
  scale_param {
    axis: 0  
    bias_term: false  ## 不学习bias，则可以简化为 alpha*x = y
  }
}
## ==== SE-end ====
layer {
  name: "conv_4_dw_relu"
  type: "ReLU"
  bottom: "conv_4_dw_fc2_scale"
  top: "conv_4_dw_fc2_scale"
}
layer {
  name: "conv_4_linear"
  type: "Convolution"
  bottom: "conv_4_dw_fc2_scale"
  top: "conv_4_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 40
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_4_linear_bn"
  type: "BatchNorm"
  bottom: "conv_4_linear"
  top: "conv_4_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_4_linear_scale"
  type: "Scale"
  bottom: "conv_4_linear"
  top: "conv_4_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
 ## ========== conv5 s=1模板 ============  
layer {
  name: "conv_5_pw"
  type: "Convolution"
  bottom: "conv_4_linear"
  top: "conv_5_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 120  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_5_pw_bn"
  type: "BatchNorm"
  bottom: "conv_5_pw"
  top: "conv_5_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_5_pw_scale"
  type: "Scale"
  bottom: "conv_5_pw"
  top: "conv_5_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_5_pw_relu"
  type: "ReLU"
  bottom: "conv_5_pw"
  top: "conv_5_pw"
}
layer {
  name: "conv_5_dw"
  type: "Convolution"
  bottom: "conv_5_pw"
  top: "conv_5_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 120  ## 
    bias_term: false
    pad: 2
    kernel_size: 5
    group: 120  ## 
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_5_dw_bn"
  type: "BatchNorm"
  bottom: "conv_5_dw"
  top: "conv_5_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_5_dw_scale"
  type: "Scale"
  bottom: "conv_5_dw"
  top: "conv_5_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
## ==== SE-start ====
layer {
  name: "conv_5_dw_pool"
  type: "Pooling"
  bottom: "conv_5_dw"
  top: "conv_5_dw_pool"
  pooling_param {
    pool: AVE
    engine: CAFFE
    global_pooling: true
  }
}
layer {
  name: "conv_5_dw_fc1"
  type: "InnerProduct"
  bottom: "conv_5_dw_pool"
  top: "conv_5_dw_fc1"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 30  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_5_dw_fc1_relu"
  type: "ReLU6"
  bottom: "conv_5_dw_fc1"
  top: "conv_5_dw_fc1"
}
layer {
  name: "conv_5_dw_fc2"
  type: "InnerProduct"
  bottom: "conv_5_dw_fc1"
  top: "conv_5_dw_fc2"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 120  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_5_dw_fc2_sigmoid"
  type: "Sigmoid"  ## 后期换用hard-sigmoid
  bottom: "conv_5_dw_fc2"
  top: "conv_5_dw_fc2"
}
layer {
  name: "conv_5_dw_fc2_scale"
  type: "Scale"
  bottom: "conv_5_dw"
  bottom: "conv_5_dw_fc2"
  top: "conv_5_dw_fc2_scale"
  scale_param {
    axis: 0  
    bias_term: false  ## 不学习bias，则可以简化为 alpha*x = y
  }
}
## ==== SE-end ====
layer {
  name: "conv_5_dw_relu"
  type: "ReLU"
  bottom: "conv_5_dw_fc2_scale"
  top: "conv_5_dw_fc2_scale"
}
layer {
  name: "conv_5_linear"
  type: "Convolution"
  bottom: "conv_5_dw_fc2_scale"
  top: "conv_5_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 40  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_5_linear_bn"
  type: "BatchNorm"
  bottom: "conv_5_linear"
  top: "conv_5_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_5_linear_scale"
  type: "Scale"
  bottom: "conv_5_linear"
  top: "conv_5_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_5_sum"
  type: "Eltwise"
  bottom: "conv_4_linear"
  bottom: "conv_5_linear"
  top: "conv_5"
} 
 ## ========== conv6 s=1模板 ============  
layer {
  name: "conv_6_pw"
  type: "Convolution"
  bottom: "conv_5"
  top: "conv_6_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 120  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_6_pw_bn"
  type: "BatchNorm"
  bottom: "conv_6_pw"
  top: "conv_6_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_6_pw_scale"
  type: "Scale"
  bottom: "conv_6_pw"
  top: "conv_6_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_6_pw_relu"
  type: "ReLU"
  bottom: "conv_6_pw"
  top: "conv_6_pw"
}
layer {
  name: "conv_6_dw"
  type: "Convolution"
  bottom: "conv_6_pw"
  top: "conv_6_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 120  ## 
    bias_term: false
    pad: 2
    kernel_size: 5
    group: 120  ## 
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_6_dw_bn"
  type: "BatchNorm"
  bottom: "conv_6_dw"
  top: "conv_6_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_6_dw_scale"
  type: "Scale"
  bottom: "conv_6_dw"
  top: "conv_6_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
## ==== SE-start ====
layer {
  name: "conv_6_dw_pool"
  type: "Pooling"
  bottom: "conv_6_dw"
  top: "conv_6_dw_pool"
  pooling_param {
    pool: AVE
    engine: CAFFE
    global_pooling: true
  }
}
layer {
  name: "conv_6_dw_fc1"
  type: "InnerProduct"
  bottom: "conv_6_dw_pool"
  top: "conv_6_dw_fc1"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 30  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_6_dw_fc1_relu"
  type: "ReLU6"
  bottom: "conv_6_dw_fc1"
  top: "conv_6_dw_fc1"
}
layer {
  name: "conv_6_dw_fc2"
  type: "InnerProduct"
  bottom: "conv_6_dw_fc1"
  top: "conv_6_dw_fc2"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 120  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_6_dw_fc2_sigmoid"
  type: "Sigmoid"  ## 后期换用hard-sigmoid
  bottom: "conv_6_dw_fc2"
  top: "conv_6_dw_fc2"
}
layer {
  name: "conv_6_dw_fc2_scale"
  type: "Scale"
  bottom: "conv_6_dw"
  bottom: "conv_6_dw_fc2"
  top: "conv_6_dw_fc2_scale"
  scale_param {
    axis: 0  
    bias_term: false  ## 不学习bias，则可以简化为 alpha*x = y
  }
}
## ==== SE-end ====
layer {
  name: "conv_6_dw_relu"
  type: "ReLU"
  bottom: "conv_6_dw_fc2_scale"
  top: "conv_6_dw_fc2_scale"
}
layer {
  name: "conv_6_linear"
  type: "Convolution"
  bottom: "conv_6_dw_fc2_scale"
  top: "conv_6_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 40  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_6_linear_bn"
  type: "BatchNorm"
  bottom: "conv_6_linear"
  top: "conv_6_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_6_linear_scale"
  type: "Scale"
  bottom: "conv_6_linear"
  top: "conv_6_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_6_sum"
  type: "Eltwise"
  bottom: "conv_5"
  bottom: "conv_6_linear"
  top: "conv_6"
} 
## ========== conv7 s=2模板============
layer {
  name: "conv_7_pw"
  type: "Convolution"
  bottom: "conv_6"
  top: "conv_7_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 240  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_7_pw_bn"
  type: "BatchNorm"
  bottom: "conv_7_pw"
  top: "conv_7_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_7_pw_scale"
  type: "Scale"
  bottom: "conv_7_pw"
  top: "conv_7_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_7_pw_shift"
  type: "Power"
  bottom: "conv_7_pw"
  top: "conv_7_pw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_7_pw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_7_pw_shift"
  top: "conv_7_pw_shift"
}
layer {
  name: "conv_7_pw_shift_relu6_div"
  type: "Power"
  bottom: "conv_7_pw_shift"
  top: "conv_7_pw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_7_pw_hswish"
  type: "Eltwise"
  bottom: "conv_7_pw"
  bottom: "conv_7_pw_shift_relu6_div"
  top: "conv_7_pw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_7_dw"
  type: "Convolution"
  bottom: "conv_7_pw_hswish"
  top: "conv_7_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 240  ##
    bias_term: false
    pad: 1  ## 
    kernel_size: 3  ##
    stride: 2  ## s=2
    group: 240  ##
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_7_dw_bn"
  type: "BatchNorm"
  bottom: "conv_7_dw"
  top: "conv_7_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_7_dw_scale"
  type: "Scale"
  bottom: "conv_7_dw"
  top: "conv_7_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_7_dw_shift"
  type: "Power"
  bottom: "conv_7_dw"
  top: "conv_7_dw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_7_dw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_7_dw_shift"
  top: "conv_7_dw_shift"
}
layer {
  name: "conv_7_dw_shift_relu6_div"
  type: "Power"
  bottom: "conv_7_dw_shift"
  top: "conv_7_dw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_7_dw_hswish"
  type: "Eltwise"
  bottom: "conv_7_dw"
  bottom: "conv_7_dw_shift_relu6_div"
  top: "conv_7_dw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_7_linear"
  type: "Convolution"
  bottom: "conv_7_dw_hswish"
  top: "conv_7_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 80  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_7_linear_bn"
  type: "BatchNorm"
  bottom: "conv_7_linear"
  top: "conv_7_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_7_linear_scale"
  type: "Scale"
  bottom: "conv_7_linear"
  top: "conv_7_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
 ## ========== conv8 s=1模板 ============  
layer {
  name: "conv_8_pw"
  type: "Convolution"
  bottom: "conv_7_linear"
  top: "conv_8_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 200  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_8_pw_bn"
  type: "BatchNorm"
  bottom: "conv_8_pw"
  top: "conv_8_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_8_pw_scale"
  type: "Scale"
  bottom: "conv_8_pw"
  top: "conv_8_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_8_pw_shift"
  type: "Power"
  bottom: "conv_8_pw"
  top: "conv_8_pw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_8_pw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_8_pw_shift"
  top: "conv_8_pw_shift"
}
layer {
  name: "conv_8_pw_shift_relu6_div"
  type: "Power"
  bottom: "conv_8_pw_shift"
  top: "conv_8_pw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_8_pw_hswish"
  type: "Eltwise"
  bottom: "conv_8_pw"
  bottom: "conv_8_pw_shift_relu6_div"
  top: "conv_8_pw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_8_dw"
  type: "Convolution"
  bottom: "conv_8_pw_hswish"
  top: "conv_8_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 200  ## 
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 200  ## 
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_8_dw_bn"
  type: "BatchNorm"
  bottom: "conv_8_dw"
  top: "conv_8_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_8_dw_scale"
  type: "Scale"
  bottom: "conv_8_dw"
  top: "conv_8_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_8_dw_shift"
  type: "Power"
  bottom: "conv_8_dw"
  top: "conv_8_dw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_8_dw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_8_dw_shift"
  top: "conv_8_dw_shift"
}
layer {
  name: "conv_8_dw_shift_relu6_div"
  type: "Power"
  bottom: "conv_8_dw_shift"
  top: "conv_8_dw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_8_dw_hswish"
  type: "Eltwise"
  bottom: "conv_8_dw"
  bottom: "conv_8_dw_shift_relu6_div"
  top: "conv_8_dw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_8_linear"
  type: "Convolution"
  bottom: "conv_8_dw_hswish"
  top: "conv_8_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 80  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_8_linear_bn"
  type: "BatchNorm"
  bottom: "conv_8_linear"
  top: "conv_8_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_8_linear_scale"
  type: "Scale"
  bottom: "conv_8_linear"
  top: "conv_8_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_8_sum"
  type: "Eltwise"
  bottom: "conv_7_linear"
  bottom: "conv_8_linear"
  top: "conv_8"
} 
 ## ========== conv9 s=1 ============  
layer {
  name: "conv_9_pw"
  type: "Convolution"
  bottom: "conv_8"
  top: "conv_9_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 184  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_9_pw_bn"
  type: "BatchNorm"
  bottom: "conv_9_pw"
  top: "conv_9_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_9_pw_scale"
  type: "Scale"
  bottom: "conv_9_pw"
  top: "conv_9_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_9_pw_shift"
  type: "Power"
  bottom: "conv_9_pw"
  top: "conv_9_pw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_9_pw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_9_pw_shift"
  top: "conv_9_pw_shift"
}
layer {
  name: "conv_9_pw_shift_relu6_div"
  type: "Power"
  bottom: "conv_9_pw_shift"
  top: "conv_9_pw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_9_pw_hswish"
  type: "Eltwise"
  bottom: "conv_9_pw"
  bottom: "conv_9_pw_shift_relu6_div"
  top: "conv_9_pw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_9_dw"
  type: "Convolution"
  bottom: "conv_9_pw_hswish"
  top: "conv_9_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 184  ## 
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 184  ## 
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_9_dw_bn"
  type: "BatchNorm"
  bottom: "conv_9_dw"
  top: "conv_9_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_9_dw_scale"
  type: "Scale"
  bottom: "conv_9_dw"
  top: "conv_9_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_9_dw_shift"
  type: "Power"
  bottom: "conv_9_dw"
  top: "conv_9_dw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_9_dw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_9_dw_shift"
  top: "conv_9_dw_shift"
}
layer {
  name: "conv_9_dw_shift_relu6_div"
  type: "Power"
  bottom: "conv_9_dw_shift"
  top: "conv_9_dw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_9_dw_hswish"
  type: "Eltwise"
  bottom: "conv_9_dw"
  bottom: "conv_9_dw_shift_relu6_div"
  top: "conv_9_dw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_9_linear"
  type: "Convolution"
  bottom: "conv_9_dw_hswish"
  top: "conv_9_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 80  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_9_linear_bn"
  type: "BatchNorm"
  bottom: "conv_9_linear"
  top: "conv_9_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_9_linear_scale"
  type: "Scale"
  bottom: "conv_9_linear"
  top: "conv_9_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_9_sum"
  type: "Eltwise"
  bottom: "conv_8"
  bottom: "conv_9_linear"
  top: "conv_9"
} 
 ## ========== conv10 s=1 ============  
layer {
  name: "conv_10_pw"
  type: "Convolution"
  bottom: "conv_9"
  top: "conv_10_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 184  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_10_pw_bn"
  type: "BatchNorm"
  bottom: "conv_10_pw"
  top: "conv_10_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_10_pw_scale"
  type: "Scale"
  bottom: "conv_10_pw"
  top: "conv_10_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_10_pw_shift"
  type: "Power"
  bottom: "conv_10_pw"
  top: "conv_10_pw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_10_pw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_10_pw_shift"
  top: "conv_10_pw_shift"
}
layer {
  name: "conv_10_pw_shift_relu6_div"
  type: "Power"
  bottom: "conv_10_pw_shift"
  top: "conv_10_pw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_10_pw_hswish"
  type: "Eltwise"
  bottom: "conv_10_pw"
  bottom: "conv_10_pw_shift_relu6_div"
  top: "conv_10_pw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_10_dw"
  type: "Convolution"
  bottom: "conv_10_pw_hswish"
  top: "conv_10_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 184  ## 
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 184  ## 
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_10_dw_bn"
  type: "BatchNorm"
  bottom: "conv_10_dw"
  top: "conv_10_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_10_dw_scale"
  type: "Scale"
  bottom: "conv_10_dw"
  top: "conv_10_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_10_dw_shift"
  type: "Power"
  bottom: "conv_10_dw"
  top: "conv_10_dw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_10_dw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_10_dw_shift"
  top: "conv_10_dw_shift"
}
layer {
  name: "conv_10_dw_shift_relu6_div"
  type: "Power"
  bottom: "conv_10_dw_shift"
  top: "conv_10_dw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_10_dw_hswish"
  type: "Eltwise"
  bottom: "conv_10_dw"
  bottom: "conv_10_dw_shift_relu6_div"
  top: "conv_10_dw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_10_linear"
  type: "Convolution"
  bottom: "conv_10_dw_hswish"
  top: "conv_10_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 80  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_10_linear_bn"
  type: "BatchNorm"
  bottom: "conv_10_linear"
  top: "conv_10_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_10_linear_scale"
  type: "Scale"
  bottom: "conv_10_linear"
  top: "conv_10_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_10_sum"
  type: "Eltwise"
  bottom: "conv_9"
  bottom: "conv_10_linear"
  top: "conv_10"
} 
 ## ========== conv11 s=1 ============  
layer {
  name: "conv_11_pw"
  type: "Convolution"
  bottom: "conv_10"
  top: "conv_11_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 480  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_11_pw_bn"
  type: "BatchNorm"
  bottom: "conv_11_pw"
  top: "conv_11_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_11_pw_scale"
  type: "Scale"
  bottom: "conv_11_pw"
  top: "conv_11_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_11_pw_shift"
  type: "Power"
  bottom: "conv_11_pw"
  top: "conv_11_pw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_11_pw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_11_pw_shift"
  top: "conv_11_pw_shift"
}
layer {
  name: "conv_11_pw_shift_relu6_div"
  type: "Power"
  bottom: "conv_11_pw_shift"
  top: "conv_11_pw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_11_pw_hswish"
  type: "Eltwise"
  bottom: "conv_11_pw"
  bottom: "conv_11_pw_shift_relu6_div"
  top: "conv_11_pw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_11_dw"
  type: "Convolution"
  bottom: "conv_11_pw_hswish"
  top: "conv_11_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 480  ## 
    bias_term: false
    pad: 1  ## 
    kernel_size: 3  ## 
    group: 480  ## 
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_11_dw_bn"
  type: "BatchNorm"
  bottom: "conv_11_dw"
  top: "conv_11_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_11_dw_scale"
  type: "Scale"
  bottom: "conv_11_dw"
  top: "conv_11_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
## ==== SE-start ====
layer {
  name: "conv_11_dw_pool"
  type: "Pooling"
  bottom: "conv_11_dw"
  top: "conv_11_dw_pool"
  pooling_param {
    pool: AVE
    engine: CAFFE
    global_pooling: true
  }
}
layer {
  name: "conv_11_dw_fc1"
  type: "InnerProduct"
  bottom: "conv_11_dw_pool"
  top: "conv_11_dw_fc1"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 120  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_11_dw_fc1_relu"
  type: "ReLU6"
  bottom: "conv_11_dw_fc1"
  top: "conv_11_dw_fc1"
}
layer {
  name: "conv_11_dw_fc2"
  type: "InnerProduct"
  bottom: "conv_11_dw_fc1"
  top: "conv_11_dw_fc2"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 480  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_11_dw_fc2_sigmoid"
  type: "Sigmoid"  ## 后期换用hard-sigmoid
  bottom: "conv_11_dw_fc2"
  top: "conv_11_dw_fc2"
}
layer {
  name: "conv_11_dw_fc2_scale"
  type: "Scale"
  bottom: "conv_11_dw"
  bottom: "conv_11_dw_fc2"
  top: "conv_11_dw_fc2_scale"
  scale_param {
    axis: 0  
    bias_term: false  ## 不学习bias，则可以简化为 alpha*x = y
  }
}
## ==== SE-end ====
# H-swish
layer {
  name: "conv_11_dw_shift"
  type: "Power"
  bottom: "conv_11_dw_fc2_scale"
  top: "conv_11_dw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_11_dw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_11_dw_shift"
  top: "conv_11_dw_shift"
}
layer {
  name: "conv_11_dw_shift_relu6_div"
  type: "Power"
  bottom: "conv_11_dw_shift"
  top: "conv_11_dw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_11_dw_hswish"
  type: "Eltwise"
  bottom: "conv_11_dw_fc2_scale"
  bottom: "conv_11_dw_shift_relu6_div"
  top: "conv_11_dw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_11_linear"
  type: "Convolution"
  bottom: "conv_11_dw_hswish"
  top: "conv_11_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 112  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_11_linear_bn"
  type: "BatchNorm"
  bottom: "conv_11_linear"
  top: "conv_11_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_11_linear_scale"
  type: "Scale"
  bottom: "conv_11_linear"
  top: "conv_11_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
 ## ========== conv12 s=1 ============  
layer {
  name: "conv_12_pw"
  type: "Convolution"
  bottom: "conv_11_linear"
  top: "conv_12_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 672  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_12_pw_bn"
  type: "BatchNorm"
  bottom: "conv_12_pw"
  top: "conv_12_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_12_pw_scale"
  type: "Scale"
  bottom: "conv_12_pw"
  top: "conv_12_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_12_pw_shift"
  type: "Power"
  bottom: "conv_12_pw"
  top: "conv_12_pw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_12_pw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_12_pw_shift"
  top: "conv_12_pw_shift"
}
layer {
  name: "conv_12_pw_shift_relu6_div"
  type: "Power"
  bottom: "conv_12_pw_shift"
  top: "conv_12_pw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_12_pw_hswish"
  type: "Eltwise"
  bottom: "conv_12_pw"
  bottom: "conv_12_pw_shift_relu6_div"
  top: "conv_12_pw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_12_dw"
  type: "Convolution"
  bottom: "conv_12_pw_hswish"
  top: "conv_12_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 672  ## 
    bias_term: false
    pad: 1  ## 
    kernel_size: 3  ## 
    group: 672  ## 
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_12_dw_bn"
  type: "BatchNorm"
  bottom: "conv_12_dw"
  top: "conv_12_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_12_dw_scale"
  type: "Scale"
  bottom: "conv_12_dw"
  top: "conv_12_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
## ==== SE-start ====
layer {
  name: "conv_12_dw_pool"
  type: "Pooling"
  bottom: "conv_12_dw"
  top: "conv_12_dw_pool"
  pooling_param {
    pool: AVE
    engine: CAFFE
    global_pooling: true
  }
}
layer {
  name: "conv_12_dw_fc1"
  type: "InnerProduct"
  bottom: "conv_12_dw_pool"
  top: "conv_12_dw_fc1"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 168  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_12_dw_fc1_relu"
  type: "ReLU6"
  bottom: "conv_12_dw_fc1"
  top: "conv_12_dw_fc1"
}
layer {
  name: "conv_12_dw_fc2"
  type: "InnerProduct"
  bottom: "conv_12_dw_fc1"
  top: "conv_12_dw_fc2"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 672  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_12_dw_fc2_sigmoid"
  type: "Sigmoid"  ## 后期换用hard-sigmoid
  bottom: "conv_12_dw_fc2"
  top: "conv_12_dw_fc2"
}
layer {
  name: "conv_12_dw_fc2_scale"
  type: "Scale"
  bottom: "conv_12_dw"
  bottom: "conv_12_dw_fc2"
  top: "conv_12_dw_fc2_scale"
  scale_param {
    axis: 0  
    bias_term: false  ## 不学习bias，则可以简化为 alpha*x = y
  }
}
## ==== SE-end ====
# H-swish
layer {
  name: "conv_12_dw_shift"
  type: "Power"
  bottom: "conv_12_dw_fc2_scale"
  top: "conv_12_dw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_12_dw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_12_dw_shift"
  top: "conv_12_dw_shift"
}
layer {
  name: "conv_12_dw_shift_relu6_div"
  type: "Power"
  bottom: "conv_12_dw_shift"
  top: "conv_12_dw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_12_dw_hswish"
  type: "Eltwise"
  bottom: "conv_12_dw_fc2_scale"
  bottom: "conv_12_dw_shift_relu6_div"
  top: "conv_12_dw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_12_linear"
  type: "Convolution"
  bottom: "conv_12_dw_hswish"
  top: "conv_12_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 112  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_12_linear_bn"
  type: "BatchNorm"
  bottom: "conv_12_linear"
  top: "conv_12_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_12_linear_scale"
  type: "Scale"
  bottom: "conv_12_linear"
  top: "conv_12_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_12_sum"
  type: "Eltwise"
  bottom: "conv_11_linear"
  bottom: "conv_12_linear"
  top: "conv_12"
} 
## ========== conv13 s=2 ============
layer {
  name: "conv_13_pw"
  type: "Convolution"
  bottom: "conv_12"
  top: "conv_13_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 672  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_13_pw_bn"
  type: "BatchNorm"
  bottom: "conv_13_pw"
  top: "conv_13_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_13_pw_scale"
  type: "Scale"
  bottom: "conv_13_pw"
  top: "conv_13_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_13_pw_shift"
  type: "Power"
  bottom: "conv_13_pw"
  top: "conv_13_pw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_13_pw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_13_pw_shift"
  top: "conv_13_pw_shift"
}
layer {
  name: "conv_13_pw_shift_relu6_div"
  type: "Power"
  bottom: "conv_13_pw_shift"
  top: "conv_13_pw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_13_pw_hswish"
  type: "Eltwise"
  bottom: "conv_13_pw"
  bottom: "conv_13_pw_shift_relu6_div"
  top: "conv_13_pw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_13_dw"
  type: "Convolution"
  bottom: "conv_13_pw_hswish"
  top: "conv_13_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 672  ##
    bias_term: false
    pad: 2  ## 
    kernel_size: 5  ##
    stride: 2  ## s=2
    group: 672  ##
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_13_dw_bn"
  type: "BatchNorm"
  bottom: "conv_13_dw"
  top: "conv_13_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_13_dw_scale"
  type: "Scale"
  bottom: "conv_13_dw"
  top: "conv_13_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
## ==== SE-start ====
layer {
  name: "conv_13_dw_pool"
  type: "Pooling"
  bottom: "conv_13_dw"
  top: "conv_13_dw_pool"
  pooling_param {
    pool: AVE
    engine: CAFFE
    global_pooling: true
  }
}
layer {
  name: "conv_13_dw_fc1"
  type: "InnerProduct"
  bottom: "conv_13_dw_pool"
  top: "conv_13_dw_fc1"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 168  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_13_dw_fc1_relu"
  type: "ReLU6"
  bottom: "conv_13_dw_fc1"
  top: "conv_13_dw_fc1"
}
layer {
  name: "conv_13_dw_fc2"
  type: "InnerProduct"
  bottom: "conv_13_dw_fc1"
  top: "conv_13_dw_fc2"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 672  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_13_dw_fc2_sigmoid"
  type: "Sigmoid"  ## 后期换用hard-sigmoid
  bottom: "conv_13_dw_fc2"
  top: "conv_13_dw_fc2"
}
layer {
  name: "conv_13_dw_fc2_scale"
  type: "Scale"
  bottom: "conv_13_dw"
  bottom: "conv_13_dw_fc2"
  top: "conv_13_dw_fc2_scale"
  scale_param {
    axis: 0  
    bias_term: false  ## 不学习bias，则可以简化为 alpha*x = y
  }
}
## ==== SE-end ====
# H-swish
layer {
  name: "conv_13_dw_shift"
  type: "Power"
  bottom: "conv_13_dw_fc2_scale"
  top: "conv_13_dw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_13_dw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_13_dw_shift"
  top: "conv_13_dw_shift"
}
layer {
  name: "conv_13_dw_shift_relu6_div"
  type: "Power"
  bottom: "conv_13_dw_shift"
  top: "conv_13_dw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_13_dw_hswish"
  type: "Eltwise"
  bottom: "conv_13_dw_fc2_scale"
  bottom: "conv_13_dw_shift_relu6_div"
  top: "conv_13_dw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_13_linear"
  type: "Convolution"
  bottom: "conv_13_dw_hswish"
  top: "conv_13_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 160  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_13_linear_bn"
  type: "BatchNorm"
  bottom: "conv_13_linear"
  top: "conv_13_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_13_linear_scale"
  type: "Scale"
  bottom: "conv_13_linear"
  top: "conv_13_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
 ## ========== conv14 s=1 ============  
layer {
  name: "conv_14_pw"
  type: "Convolution"
  bottom: "conv_13_linear"
  top: "conv_14_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 960  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_14_pw_bn"
  type: "BatchNorm"
  bottom: "conv_14_pw"
  top: "conv_14_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_14_pw_scale"
  type: "Scale"
  bottom: "conv_14_pw"
  top: "conv_14_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_14_pw_shift"
  type: "Power"
  bottom: "conv_14_pw"
  top: "conv_14_pw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_14_pw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_14_pw_shift"
  top: "conv_14_pw_shift"
}
layer {
  name: "conv_14_pw_shift_relu6_div"
  type: "Power"
  bottom: "conv_14_pw_shift"
  top: "conv_14_pw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_14_pw_hswish"
  type: "Eltwise"
  bottom: "conv_14_pw"
  bottom: "conv_14_pw_shift_relu6_div"
  top: "conv_14_pw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_14_dw"
  type: "Convolution"
  bottom: "conv_14_pw_hswish"
  top: "conv_14_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 960  ## 
    bias_term: false
    pad: 2  ## 
    kernel_size: 5  ## 
    group: 960  ## 
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_14_dw_bn"
  type: "BatchNorm"
  bottom: "conv_14_dw"
  top: "conv_14_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_14_dw_scale"
  type: "Scale"
  bottom: "conv_14_dw"
  top: "conv_14_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
## ==== SE-start ====
layer {
  name: "conv_14_dw_pool"
  type: "Pooling"
  bottom: "conv_14_dw"
  top: "conv_14_dw_pool"
  pooling_param {
    pool: AVE
    engine: CAFFE
    global_pooling: true
  }
}
layer {
  name: "conv_14_dw_fc1"
  type: "InnerProduct"
  bottom: "conv_14_dw_pool"
  top: "conv_14_dw_fc1"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 240  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_14_dw_fc1_relu"
  type: "ReLU6"
  bottom: "conv_14_dw_fc1"
  top: "conv_14_dw_fc1"
}
layer {
  name: "conv_14_dw_fc2"
  type: "InnerProduct"
  bottom: "conv_14_dw_fc1"
  top: "conv_14_dw_fc2"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 960  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_14_dw_fc2_sigmoid"
  type: "Sigmoid"  ## 后期换用hard-sigmoid
  bottom: "conv_14_dw_fc2"
  top: "conv_14_dw_fc2"
}
layer {
  name: "conv_14_dw_fc2_scale"
  type: "Scale"
  bottom: "conv_14_dw"
  bottom: "conv_14_dw_fc2"
  top: "conv_14_dw_fc2_scale"
  scale_param {
    axis: 0  
    bias_term: false  ## 不学习bias，则可以简化为 alpha*x = y
  }
}
## ==== SE-end ====
# H-swish
layer {
  name: "conv_14_dw_shift"
  type: "Power"
  bottom: "conv_14_dw_fc2_scale"
  top: "conv_14_dw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_14_dw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_14_dw_shift"
  top: "conv_14_dw_shift"
}
layer {
  name: "conv_14_dw_shift_relu6_div"
  type: "Power"
  bottom: "conv_14_dw_shift"
  top: "conv_14_dw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_14_dw_hswish"
  type: "Eltwise"
  bottom: "conv_14_dw_fc2_scale"
  bottom: "conv_14_dw_shift_relu6_div"
  top: "conv_14_dw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_14_linear"
  type: "Convolution"
  bottom: "conv_14_dw_hswish"
  top: "conv_14_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 160  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_14_linear_bn"
  type: "BatchNorm"
  bottom: "conv_14_linear"
  top: "conv_14_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_14_linear_scale"
  type: "Scale"
  bottom: "conv_14_linear"
  top: "conv_14_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_14_sum"
  type: "Eltwise"
  bottom: "conv_13_linear"
  bottom: "conv_14_linear"
  top: "conv_14"
} 
 ## ========== conv15 s=1 ============  
layer {
  name: "conv_15_pw"
  type: "Convolution"
  bottom: "conv_14"
  top: "conv_15_pw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 960  ## 
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_15_pw_bn"
  type: "BatchNorm"
  bottom: "conv_15_pw"
  top: "conv_15_pw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_15_pw_scale"
  type: "Scale"
  bottom: "conv_15_pw"
  top: "conv_15_pw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_15_pw_shift"
  type: "Power"
  bottom: "conv_15_pw"
  top: "conv_15_pw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_15_pw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_15_pw_shift"
  top: "conv_15_pw_shift"
}
layer {
  name: "conv_15_pw_shift_relu6_div"
  type: "Power"
  bottom: "conv_15_pw_shift"
  top: "conv_15_pw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_15_pw_hswish"
  type: "Eltwise"
  bottom: "conv_15_pw"
  bottom: "conv_15_pw_shift_relu6_div"
  top: "conv_15_pw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_15_dw"
  type: "Convolution"
  bottom: "conv_15_pw_hswish"
  top: "conv_15_dw"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 960  ## 
    bias_term: false
    pad: 2  ## 
    kernel_size: 5  ## 
    group: 960  ## 
    engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_15_dw_bn"
  type: "BatchNorm"
  bottom: "conv_15_dw"
  top: "conv_15_dw"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_15_dw_scale"
  type: "Scale"
  bottom: "conv_15_dw"
  top: "conv_15_dw"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
## ==== SE-start ====
layer {
  name: "conv_15_dw_pool"
  type: "Pooling"
  bottom: "conv_15_dw"
  top: "conv_15_dw_pool"
  pooling_param {
    pool: AVE
    engine: CAFFE
    global_pooling: true
  }
}
layer {
  name: "conv_15_dw_fc1"
  type: "InnerProduct"
  bottom: "conv_15_dw_pool"
  top: "conv_15_dw_fc1"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 240  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_15_dw_fc1_relu"
  type: "ReLU6"
  bottom: "conv_15_dw_fc1"
  top: "conv_15_dw_fc1"
}
layer {
  name: "conv_15_dw_fc2"
  type: "InnerProduct"
  bottom: "conv_15_dw_fc1"
  top: "conv_15_dw_fc2"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  inner_product_param {
    num_output: 960  ##
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0.0
    }
  }
}
layer {
  name: "conv_15_dw_fc2_sigmoid"
  type: "Sigmoid"  ## 后期换用hard-sigmoid
  bottom: "conv_15_dw_fc2"
  top: "conv_15_dw_fc2"
}
layer {
  name: "conv_15_dw_fc2_scale"
  type: "Scale"
  bottom: "conv_15_dw"
  bottom: "conv_15_dw_fc2"
  top: "conv_15_dw_fc2_scale"
  scale_param {
    axis: 0  
    bias_term: false  ## 不学习bias，则可以简化为 alpha*x = y
  }
}
## ==== SE-end ====
# H-swish
layer {
  name: "conv_15_dw_shift"
  type: "Power"
  bottom: "conv_15_dw_fc2_scale"
  top: "conv_15_dw_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_15_dw_shift_relu6"
  type: "ReLU6"
  bottom: "conv_15_dw_shift"
  top: "conv_15_dw_shift"
}
layer {
  name: "conv_15_dw_shift_relu6_div"
  type: "Power"
  bottom: "conv_15_dw_shift"
  top: "conv_15_dw_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_15_dw_hswish"
  type: "Eltwise"
  bottom: "conv_15_dw_fc2_scale"
  bottom: "conv_15_dw_shift_relu6_div"
  top: "conv_15_dw_hswish"
  eltwise_param {
    operation: PROD
  }
}
layer {
  name: "conv_15_linear"
  type: "Convolution"
  bottom: "conv_15_dw_hswish"
  top: "conv_15_linear"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 160  ##
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_15_linear_bn"
  type: "BatchNorm"
  bottom: "conv_15_linear"
  top: "conv_15_linear"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_15_linear_scale"
  type: "Scale"
  bottom: "conv_15_linear"
  top: "conv_15_linear"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "conv_15_sum"
  type: "Eltwise"
  bottom: "conv_14"
  bottom: "conv_15_linear"
  top: "conv_15"
} 
## ========== 16. conv2d 1*1 ============  
layer {
  name: "conv_16"
  type: "Convolution"
  bottom: "conv_15"
  top: "conv_16"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 960
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "conv_16_bn"
  type: "BatchNorm"
  bottom: "conv_16"
  top: "conv_16"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "conv_16_scale"
  type: "Scale"
  bottom: "conv_16"
  top: "conv_16"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
# H-swish
layer {
  name: "conv_16_shift"
  type: "Power"
  bottom: "conv_16"
  top: "conv_16_shift"
  power_param {
    power: 1
    scale: 1
    shift: 3
  }
}
layer {
  name: "conv_16_shift_relu6"
  type: "ReLU6"
  bottom: "conv_16_shift"
  top: "conv_16_shift"
}
layer {
  name: "conv_16_shift_relu6_div"
  type: "Power"
  bottom: "conv_16_shift"
  top: "conv_16_shift_relu6_div"
  power_param {
    power: 1
    scale: 0.16666667
    shift: 0
  }
}
layer {
  name: "conv_16_hswish"
  type: "Eltwise"
  bottom: "conv_16"
  bottom: "conv_16_shift_relu6_div"
  top: "conv_16_hswish"
  eltwise_param {
    operation: PROD
  }
}
## ========== 17. pool 7*7 ============  
# layer {
  # name: "pool_17"
  # type: "Pooling"
  # bottom: "conv_16_hswish"
  # top: "pool_17"
  # pooling_param {
    # pool: AVE
    # engine: CAFFE
    # global_pooling: true
  # }
# }

##=====特征融合部分=====##
## 反卷积上采样1
layer {
  name: "merge_1_conv"
  type: "Convolution"
  bottom: "conv_16_hswish"
  top: "merge_1_conv"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 640
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "merge_1_conv_bn"
  type: "BatchNorm"
  bottom: "merge_1_conv"
  top: "merge_1_conv"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "merge_1_conv_scale"
  type: "Scale"
  bottom: "merge_1_conv"
  top: "merge_1_conv"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "merge_1_conv_relu"
  type: "ReLU"
  bottom: "merge_1_conv"
  top: "merge_1_conv"
}
layer {
  name: "merge_1_up"
  type: "Deconvolution"
  bottom: "merge_1_conv"
  top: "merge_1_up"
    param { 
      lr_mult: 0 
      decay_mult: 0
    }
    convolution_param {
        num_output: 640 
        kernel_size: 4 
        pad: 1 
        stride: 2 
        group: 640
        weight_filler: {
          type: "bilinear" 
        } 
        bias_term: false
    }  
}

layer {
  name: "merge_1_concat"
  type: "Concat"
  bottom: "merge_1_up"
  bottom: "conv_13_pw_hswish"
  top: "merge_1_concat"
  concat_param {
    concat_dim: 1
  }
}
## 反卷积上采样2
layer {
  name: "merge_2_conv"
  type: "Convolution"
  bottom: "merge_1_concat"
  top: "merge_2_conv"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 320
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "merge_2_conv_bn"
  type: "BatchNorm"
  bottom: "merge_2_conv"
  top: "merge_2_conv"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "merge_2_conv_scale"
  type: "Scale"
  bottom: "merge_2_conv"
  top: "merge_2_conv"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "merge_2_conv_relu"
  type: "ReLU"
  bottom: "merge_2_conv"
  top: "merge_2_conv"
}
layer {
  name: "merge_2_up"
  type: "Deconvolution"
  bottom: "merge_2_conv"
  top: "merge_2_up"
    param { 
      lr_mult: 0 
      decay_mult: 0
    }
    convolution_param {
        num_output: 320 
        kernel_size: 4 
        pad: 1 
        stride: 2 
        group: 320
        weight_filler: {
          type: "bilinear" 
        } 
        bias_term: false
    }  
}

layer {
  name: "merge_2_concat"
  type: "Concat"
  bottom: "merge_2_up"
  bottom: "conv_7_pw_hswish"
  top: "merge_2_concat"
  concat_param {
    concat_dim: 1
  }
}
## 反卷积上采样3
layer {
  name: "merge_3_conv"
  type: "Convolution"
  bottom: "merge_2_concat"
  top: "merge_3_conv"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  convolution_param {
    num_output: 160
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "merge_3_conv_bn"
  type: "BatchNorm"
  bottom: "merge_3_conv"
  top: "merge_3_conv"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "merge_3_conv_scale"
  type: "Scale"
  bottom: "merge_3_conv"
  top: "merge_3_conv"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "merge_3_conv_relu"
  type: "ReLU"
  bottom: "merge_3_conv"
  top: "merge_3_conv"
}
layer {
  name: "merge_3_up"
  type: "Deconvolution"
  bottom: "merge_3_conv"
  top: "merge_3_up"
    param { 
      lr_mult: 0 
      decay_mult: 0
    }
    convolution_param {
        num_output: 160 
        kernel_size: 4 
        pad: 1 
        stride: 2 
        group: 160
        weight_filler: {
          type: "bilinear" 
        } 
        bias_term: false
    }  
}

layer {
  name: "merge_3_concat"
  type: "Concat"
  bottom: "merge_3_up"
  bottom: "conv_4_pw"
  top: "merge_3_concat"
  concat_param {
    concat_dim: 1
  }
}
##再做一次卷积后在进行输出
layer {
  name: "merge_final_conv"
  type: "Convolution"
  bottom: "merge_3_concat"
  top: "merge_final_conv"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "merge_final_conv_bn"
  type: "BatchNorm"
  bottom: "merge_final_conv"
  top: "merge_final_conv"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
}
layer {
  name: "merge_final_conv_scale"
  type: "Scale"
  bottom: "merge_final_conv"
  top: "merge_final_conv"
  param {
    lr_mult: 1.0
    decay_mult: 0.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  scale_param {
    bias_term: true
  }
}
layer {
  name: "merge_final_relu"
  type: "ReLU"
  bottom: "merge_final_conv"
  top: "merge_final_conv"
}

## 生成scoremap
layer {
  name: "f_score"
  type: "Convolution"
  bottom: "merge_final_conv"
  top: "f_score"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 1
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "F_score"
  type: "Sigmoid"
  bottom: "f_score"
  top: "f_score"

}

## 生成geomap
layer {
  name: "f_geo"
  type: "Convolution"
  bottom: "merge_final_conv"
  top: "f_geo"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 4
 #   bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "geomap_sigmoid"
  bottom: "f_geo"
  top: "f_geo"
  type: "Sigmoid"
}
layer {
  name: "geomap"
  bottom: "f_geo"
  top: "geomap"  # 1*4*128*128
  type: "Power"
  ## f(x)= (shift + scale * x) ^ power
  power_param {
    power: 1
    ## * FLAGS.text_scale
    scale: 512  
    shift: 0
  }
}
## 生成anglemap
layer {
  name: "f_angle"
  type: "Convolution"
  bottom: "merge_final_conv"
  top: "f_angle"
  param {
    lr_mult: 1.0
    decay_mult: 1.0
  }
  param {
    lr_mult: 2.0
    decay_mult: 0.0
  }
  convolution_param {
    num_output: 1
  #  bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "anglemap_sigmoid"
  bottom: "f_angle"
  top: "f_angle"
  type: "Sigmoid"
}
layer {
  name: "anglemap_tmp"
  bottom: "f_angle"
  top: "anglemap_tmp"
  type: "Power"
  ## f(x)= (shift + scale * x) ^ power
  power_param {
    power: 1
    scale: 1
    shift: -0.5
  }
}
layer {
  name: "anglemap"
  bottom: "anglemap_tmp"
  top: "anglemap" # 1*1*128*128
  type: "Power"
  ## f(x)= (shift + scale * x) ^ power
  power_param {
    power: 1
    scale: 1.57
    shift: 0
  }
}
layer {
  name: "F_geometry"
  type: "Concat"
  bottom: "geomap"
  bottom: "anglemap"
  top: "geo_concat"  # 1*5*128*128 (4+1)
  concat_param {
    concat_dim: 1
  }
}

## 计算Loss
layer {
  name: "Loss_rbox"
  type: "Python"
  bottom: "geo_concat"  # 1*5*128*128 (4+1)
  bottom: "geo_map"  # 1*5*128*128 (4+1)
  bottom: "score_map" # scoremap的ture_gt 1*1*128*128
  top: "Loss_rbox"
  loss_weight: 1
  python_param {
    module: "pylayerUtils"
    layer: "RBoxLossLayer"
  }
}
# layer {
  # name: "Loss_score"
  # type: "DiceCoefLoss"
  # bottom: "f_score"
  # bottom: "score_map"
  # top: "Loss_score"
  # loss_weight: 0.01
 # }
layer {
  name: "Loss_score"
  type: "Python"
  bottom: "f_score"
  bottom: "score_map"
  top: "Loss_score"
  loss_weight: 0.01
  python_param {
    module: "pylayerUtils"
    layer: "DiceCoefLossLayer"
  }
}